#day 1
->set up react app
->initize git repo
->npm i react-bootstrap bootstrap react-i (for react-bootstrap and bootstrap)
->created header and footer 
->cretaed product.js (data)
->product.jsx in component and implement it in HomeScreen.jsx
-> npm i react-router-dom
->npm i react-router-bootstrap (linkContainer in place of a href)
->used Outlet
->created Rating.jsx (imported stars from react icon and logic)

#day2
-> creates productScreen for single detailed product
->set up backend npm init
->installed express and changed module from commonjs
->created server and routes using express
->installed nodemon and concurrently(to start both bend and fend)
->installed Dotenv
->installed axios to fetch data of products and product from backend data(product.js)
---->setup Epark project on mongodb atlas and created collection EparkByBharat and then copy its url and ---->pasted in MongoDb compass and connected to the node js db.js

#day3
->created models folder in backend 
->created Schema and models for product,user and order
->created product and user samples in files in data folder
->used npm i bcryptjs to hash password(it will show hashed password in database)

#day4
->installed colors to color terminal
->insert data into database(mongodb) through seeder js

#day5
->used express routers and dislplay data from backend to HomeScreen
->used custum middleware asyncHandler (used to solve try/catch in each)

#day6
-> created errorHandler middleware file to show errror for single and multiple products 

#day7
-> created controller file where getProducts and getProductById function import to route and 
make code cleaner
->npm i @reduxjs/toolkit react-redux == install redux toolkit for state management
-> create constants file and apislice(parent) file to fetchapi

#day8
-> created productsapislice file which is used to fetch data instead of axios in homescreen
-> created getProductDetails() func which is used to fetch data instead of axios for 

#day9
-> created loader and message error component and used in homescreen and productScreen instead of loading heading and error message